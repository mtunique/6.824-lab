package main

import "os"
import "fmt"
import (
	"mapreduce"
	"strings"
	"unicode"
	"unicode/utf8"
	"strconv"
	"sort"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	wordMap := make(map[string]int)

	ss := 0
	words := strings.Fields(value)

	for _, word := range words {
		if word[0:1] == "\"" {
			ss = ss + 1
		}
		preIndex := 0
		for index, char := range word {
			if !unicode.IsLetter(char)  {
				if preIndex < index {
					tmp := word[preIndex:index]
					wordMap[tmp] += 1
					ss += 1
				}
				preIndex = index + 1
			}
		}

		r, _ := utf8.DecodeRuneInString(word[len(word)-1:])

		if preIndex < len(word) && unicode.IsLetter(r) {
			tmp := word[preIndex:]
			wordMap[tmp] += 1
			ss += 1
		}
	}

	var result []mapreduce.KeyValue

	sum := 0
	for key := range wordMap {
		result = append(result, mapreduce.KeyValue{key, document})
		sum += wordMap[key]
	}

	return result
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	count := 0
	var fileList []string
	for _, value := range values {
		count += 1
		fileList = append(fileList, value)
	}

	sort.Strings(fileList)
	return strconv.Itoa(count) + " " + strings.Join(fileList, ",")
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("iiseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("iiseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
